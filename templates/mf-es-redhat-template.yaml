# Â© Copyright 2018 Micro Focus or one of its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  "This template deploys a single Micro Focus Enterprise Server instance as
  defined in the Micro Focus Enterprise Server Reference Architecture.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template. License: Apache 2.0 (Please do not remove) Sept,05,2018. Micro Focus
  Enterprise Server is licensed separately, please review the terms and
  conditions here (https://www.microfocus.com/about/legal/) for further details.
  (qs-1qeg3mkuj)"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Software License Agreement
        Parameters:
          - LicenseAgreement
          - ESLicenseFilename
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZones
          - PrivateSubnet1AID
          - PrivateSubnet2AID
          - TargetGroup
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainMemberSGID
          - DomainAdminPassword
      - Label:
          default: Enterprise Server Configuration
        Parameters:
          - ESInstanceType
          - MaxNumberOfESInstances
          - MetricsNamespace
          - KeyPairName
          - RegionsPerInstance
          - AdditionalESStorageinGiB
          - ESClientAccessSGID
          - ESS3BucketName
          - EMailNotificationTopic
      - Label:
          default: PAC Configuration
        Parameters:
          - PACDBMasterUserPassword
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      AdditionalESStorageinGiB:
        default: Additional Enterprise Server instance storage
      AvailabilityZones:
        default: Availability Zones
      DomainAdminPassword:
        default: Domain Admin account password
      DomainDNSName:
        default: Domain DNS name
      DomainMemberSGID:
        default: Domain member Security Group ID
      EMailNotificationTopic:
        default: EMail Notification Topic
      ESClientAccessSGID:
        default: Enterprise Server Application (Client) Access Security Group ID
      ESInstanceType:
        default: Enterprise Server instance type
      ESLicenseFilename:
        default: Enterprise Server license filename
      ESS3BucketName:
        default: Enterprise Server S3 bucket name
      KeyPairName:
        default: Key pair name
      LicenseAgreement:
        default: License agreement
      MaxNumberOfESInstances:
        default: Maximum number of Enterprise Server instances to run simultaneously
      MetricsNamespace:
        default: Namespace for the Enterprise Server custom metrics
      PACDBMasterUserPassword:
        default: PAC database Master password
      PrivateSubnet1AID:
        default: Private Subnet 1A ID
      PrivateSubnet2AID:
        default: Private Subnet 2A ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      RegionsPerInstance:
        default: Number of Enterprise Server regions per instance
      TargetGroup:
        default: The target group for the load balancer
Parameters:
  AdditionalESStorageinGiB:
    Type: Number
    Description: >-
      Additional EBS storage capacity in gibibytes (GiBs) added to each
      Enterprise Server instance. Enter 0-16384 GiB.
    MinValue: 0
    MaxValue: 16384
    Default: 100
  AvailabilityZones:
    Description: >-
      The list of Availability Zones to use for the subnets in the VPC. The
      Quick Start uses two Availability Zones from your list and preserves the
      logical order you specify.
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  DomainAdminPassword:
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: >-
      The password for the domain Admin account. Must be at least 8 characters
      containing letters, numbers, and symbols.
    MaxLength: '32'
    MinLength: '8'
    NoEcho: true
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: >-
      The fully qualified domain name (FQDN), e.g., example.com. Must be 2-255
      characters.
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainMemberSGID:
    Description: >-
      The ID of the Domain Member Security Group (e.g., sg-7f16e910).
    Type: 'AWS::EC2::SecurityGroup::Id'
  EMailNotificationTopic:
    Type: String
    Default: ''
  ESClientAccessSGID:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: >-
      Security Group ID for application ingress into the Enterpriser Server
      instance (e.g., sg-1234abcd).
  ESInstanceType:
    AllowedValues:
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
    Description: The type of Enterprise Server instance.
    Default: c5.large
    Type: String
  ESLicenseFilename:
    Description: >-
      Place the license file obtained from Micro Focus in the S3 bucket folder:
      s3://<Enterprise Server S3 bucket name>/license/
    Type: String
  ESS3BucketName:
    AllowedPattern: '^[a-z0-9][a-z0-9-.]*$'
    Description: >-
      The name of the existing S3 bucket used to store/retrieve objects specific
      to this stack. A system integrator extending this Quick Start should use
      this bucket to store or retrieve items needed. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).
    Type: String
  KeyPairName:
    Description: >-
      The name of an existing EC2 key pair. All instances will launch with this key pair.
    Type: 'AWS::EC2::KeyPair::KeyName'
  LicenseAgreement:
    Description: >-
      I have read and agree to the license terms for Micro Focus Enterprise
      Server
      (https://www.microfocus.com/documentation/enterprise-developer/ed-latest/ES-WIN/GUID-0562B3C9-2271-4CE8-AF64-93DE4940077F.html).
    Type: String
    Default: '-'
    AllowedValues:
      - I agree
      - '-'
    ConstraintDescription: must answer 'I agree'.
  MaxNumberOfESInstances:
    Default: 3
    MinValue: 3
    MaxValue: 10
    Description: >-
      The maximum capacity (3-10) for the Enterprise Server Auto Scaling group.
    Type: Number
  MetricsNamespace:
    Type: String
    AllowedPattern: '[a-zA-Z0-9\.\-_\/#:]*'
    Default: Custom
    Description: >-
      The namespace must be 1-256 characters. Possible characters are: alphanumeric
      characters (0-9A-Za-z), period (.), hyphen (-), underscore (_),
      forward slash (/), hash (#), and colon (:).
    MaxLength: '256'
    MinLength: '1'
  PACDBMasterUserPassword:
    AllowedPattern: >-
      ^((?![\/"@])[^\x00-\x1F\x80-\x9F]){8,}$
    ConstraintDescription: >-
      Must be at least eight characters long, as in "mypassword". Can be any
      printable ASCII character except "/", """, or "@".
    Description: >-
      The password for the DB master user. Must be at least eight characters
      long, as in "mypassword". Can be any printable ASCII character except
      "/", """, or "@".
    Type: String
    NoEcho: true
  PrivateSubnet1AID:
    Description: >-
      The ID of private subnet 1A in Availability Zone 1 (e.g.,
      subnet-a0246dcd).
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2AID:
    Description: >-
      The ID of private subnet 2A in Availability Zone 2 (e.g.,
      subnet-01a43dc1ca1fa7f9b).
    Type: 'AWS::EC2::Subnet::Id'
  TargetGroup:
    Description: 'The target group for the PAC load balancer.'
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-microfocus-amc-es/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RegionsPerInstance:
    ConstraintDescription: Must be between 1 and 10 regions per instance.
    Description: >-
      The number of regions per Enterprise Server instance. Must be between 1 and
      10 regions per instance.
    Default: 1
    MaxValue: 10
    MinValue: 1
    Type: Number
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty.
  LicenseAgreementRule:
    Assertions:
      - Assert:
          'Fn::Contains':
            - - I agree
            - !Ref LicenseAgreement
        AssertDescription: User must agree to the terms of the license agreement.
Mappings:
  AWSAMIRegionMap:
    AMI:
      MFES40AMI: ES_60_PU01_RH_V1
    ap-northeast-1:
      MFES40AMI: ami-05960a57ebd5c5fa3
    ap-northeast-2:
      MFES40AMI: ami-0b0415a9b6d384f27
    ap-south-1:
      MFES40AMI: ami-0d0442cfd2c2f1c7a
    ap-southeast-1:
      MFES40AMI: ami-0293084bb483fe506
    ap-southeast-2:
      MFES40AMI: ami-032474ecc3322864e
    ca-central-1:
      MFES40AMI: ami-08586e4e410b9f7e1
    eu-central-1:
      MFES40AMI: ami-072da8340c7ac3c90
    eu-north-1:
      MFES40AMI: ami-0cb5cdae39af65e38
    eu-west-1:
      MFES40AMI: ami-0d912fc5fb35a1518
    eu-west-2:
      MFES40AMI: ami-09fd6e481820a31c1
    eu-west-3:
      MFES40AMI: ami-0bb15fa6a1211242b
    sa-east-1:
      MFES40AMI: ami-0c03148647a303bf2
    us-east-1:
      MFES40AMI: ami-0363db79d74750f4f
    us-east-2:
      MFES40AMI: ami-07bae3b4993f74638
    us-west-1:
      MFES40AMI: ami-09c135e2f738e08cb
    us-west-2:
      MFES40AMI: ami-08dcd5f1cebf6ef75
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  HaveESlicenseFilename: !Not
    - !Equals
      - !Ref ESLicenseFilename
      - ''
Resources:
  ESInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                Effect: Allow
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                    - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Version: 2012-10-17
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${ESS3BucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${ESS3BucketName}/*'
              - Action:
                  - 'ds:Describe*'
                Effect: Allow
                Resource: '*'
          PolicyName: ESInstancePolicy
        - PolicyDocument:
            Statement:
              - Action: "autoscaling:CompleteLifecycleAction"
                Effect: "Allow"
                Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/es_asg"
              - Action: "autoscaling:DescribeAutoScalingInstances"
                Effect: "Allow"
                Resource: '*'
            Version: 2012-10-17
          PolicyName: AutoscalingPolicy
  ESInstanceRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ESInstanceRole
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  CalcPrimaryDataVolumeStorageSizeFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var props = event.ResourceProperties;
            var result = (parseInt(props.RegionsPerInstance) * parseInt(props.RegionStorageOverheadInGiB)) + parseInt(props.AdditionalESStorageinGiB);
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs12.x
  ESPrimaryDataVolumeStorageSize:
    Type: 'Custom::CalcPrimaryDataVolumeStorageSizeFunction'
    Properties:
      ServiceToken: !GetAtt CalcPrimaryDataVolumeStorageSizeFunction.Arn
      RegionsPerInstance: !Ref RegionsPerInstance
      RegionStorageOverheadInGiB: 50
      AdditionalESStorageinGiB: !Ref AdditionalESStorageinGiB
      Value: 0
  ESInstanceLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ESInstanceRole
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            - !Ref ESS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - 000-NoOperation
            - 010-JoinDomain
            - !If
              - HaveESlicenseFilename
              - 020-ApplyESLicenseFile
              - 000-NoOperation
            - 030-Setup-PAC-Database-Envrionment
            - 040-InstallBankDemoPAC
        000-NoOperation:
          commands:
            a-no-operation:
              command: echo "No-Operation" > nul
              waitAfterCompletion: '0'
        010-JoinDomain:
          files:
            '/tmp/JoinTo-Domain-Linux.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/JoinTo-Domain-Linux.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            a-JoinDomain:
              command: !Sub
                ./tmp/JoinTo-Domain-Linux.sh Admin ${DomainDNSName} '${DomainAdminPassword}'
              waitAfterCompletion: '0'
        020-ApplyESLicenseFile:
          files:
            '/tmp/Enterprise-Server.mflic':
              source: !Sub
                - >-
                  https://${ESS3BucketName}.${QSS3Region}.amazonaws.com/license/${ESLicenseFilename}
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
            '/tmp/Start-MFDS.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Start-MFDS.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
            '/tmp/Start-ESCWA.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Start-ESCWA.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            a-install-license:
              command: |
                while ! ./var/microfocuslicensing/bin/cesadmintool.sh -install /tmp/Enterprise-Server.mflic
                do
                  sleep 1
                done
            b-start-mfds:
              command:
                ./tmp/Start-MFDS.sh
            c-start-escwa:
              command:
                ./tmp/Start-ESCWA.sh
        030-Setup-PAC-Database-Envrionment:
          files:
            '/tmp/Create-ps-DSN.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Create-ps-DSN.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            a-Create-Postgres-DSN:
              command: !Sub
                /tmp/Create-ps-DSN.sh ${PACDBMasterUserPassword}
              waitAfterCompletion: '0'
        040-InstallBankDemoPAC:
          files:
            '/tmp/Install-Region.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Install-Region.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
            '/tmp/Add-region-to-PAC.sh':
              source: !Sub
                - >-
                  https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/Add-region-to-PAC.sh
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: 000550
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            a-ImportBNKDM:
              command:
                ./tmp/Install-Region.sh "/home/ec2-user/BankDemo_PAC/Repo/BNKDM.xml"
            b-add-region-to-pac:
              command:
                ./tmp/Add-region-to-PAC.sh BNKDM
              waitAfterCompletion: '0'
    Properties:
      LaunchTemplateName: "ESInstanceLaunchTemplate"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: xvdb
            Ebs:
              VolumeType: gp2
              VolumeSize: !GetAtt ESPrimaryDataVolumeStorageSize.Value
        SecurityGroupIds:
          - !Ref DomainMemberSGID
          - !Ref ESClientAccessSGID
        IamInstanceProfile:
          Arn: !GetAtt ESInstanceRoleProfile.Arn
        KeyName: !Ref KeyPairName
        InstanceType: !Ref ESInstanceType
        ImageId: !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - MFES40AMI
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-ESSERVER-WARM'
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-ESSERVER-WARM Data Volume'
        UserData:
          Fn::Base64: !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"

            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            if [ ! -s /var/log/Add-region-to-PAC.log ]
            then
                while ! rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                do
                    sleep 1
                done

                while ! yum -y install python-pip
                do
                    sleep 1
                done

                while ! /bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                do
                    sleep 1
                done

                while ! yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
                do
                    sleep 1
                done

                while ! yum -y install unzip
                do
                    sleep 1
                done

                while ! curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                do
                    sleep 1
                done
                unzip -q /tmp/awscliv2.zip -d /tmp/
                /tmp/aws/install

                cp -f `pip show aws-cfn-bootstrap 2>/dev/null|grep -E "^Location"|awk -F: '{print $2}'`/init/redhat/cfn-hup /etc/init.d/

                chmod 755 /etc/init.d/cfn-hup
                chkconfig --add cfn-hup

                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ESInstanceLaunchTemplate --configsets config --region ${AWS::Region}
            fi

            STATE=$(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCE_ID --query "AutoScalingInstances[].LifecycleState" --output text)
            if [[ $STATE = "Pending:Wait" ]] || [[ $STATE = "Pending" ]]
            then
                source /opt/microfocus/EnterpriseDeveloper/bin/cobsetenv

                nohup mfds &>/dev/null &
                while ! mdump -a localhost -p 86 -s 1 -v 2 > nul
                do
                    sleep 1
                done

                nohup escwa --BasicConfig.MfRequestedEndpoint="tcp:*:10004" --write=true < /dev/null > /tmp/escwa.out 2>&1 &
                while ! curl http://localhost:10004
                do
                    sleep 1
                done

                casstart -rBNKDM -w
            fi

            while [[ $STATE != "Pending:Wait" ]] && [[ $STATE != "Warmed:Pending:Wait" ]]
            do
              sleep 1
              STATE=$(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCE_ID --query "AutoScalingInstances[].LifecycleState" --output text)
            done

            aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id $INSTANCE_ID --lifecycle-hook-name launch_hook --auto-scaling-group-name es_asg  --region ${AWS::Region}
  ESInstanceColdStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/mf-es-redhat-cold-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        AvailabilityZones: !Join
          - ','
          - !Ref AvailabilityZones
        DomainAdminPassword: !Ref DomainAdminPassword
        DomainDNSName: !Ref DomainDNSName
        DomainMemberSGID: !Ref DomainMemberSGID
        EMailNotificationTopic: !Ref EMailNotificationTopic
        ESClientAccessSGID: !Ref ESClientAccessSGID
        ESInstanceType: !Ref ESInstanceType
        ESLicenseFilename: !Ref ESLicenseFilename
        ESS3BucketName: !Ref ESS3BucketName
        AdditionalESStorageinGiB: !Ref AdditionalESStorageinGiB
        KeyPairName: !Ref KeyPairName
        LicenseAgreement: !Ref LicenseAgreement
        PACDBMasterUserPassword: !Ref PACDBMasterUserPassword
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        RegionsPerInstance: !Ref RegionsPerInstance
        SubnetID: !Ref PrivateSubnet1AID
  AddColdInstanceToASGAndCreateWarmPoolLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: addColdInstanceToASG
      Environment:
        Variables:
          instanceId: !GetAtt ESInstanceColdStack.Outputs.ESInstanceID
          autoscalingGroup: !Ref ESInstanceASG
      Code:
        ZipFile: |
          import sys
          from pip._internal import main

          # Update boto3 (current version does not have put_warm_pool)
          main(['install', '-I', '-q', 'boto3', '--target', '/tmp/', '--no-cache-dir', '--disable-pip-version-check'])
          sys.path.insert(0,'/tmp/')

          import os, boto3, json
          import cfnresponse

          def handler(event, context):
              print('EVENT:[{}]'.format(event))
              print(os.environ['instanceId'])
              print(os.environ['autoscalingGroup'])
              response = None
              if event['RequestType'] == 'Create':
                  client = boto3.client('autoscaling')
                  response = client.attach_instances(InstanceIds=[
                          os.environ['instanceId'],
                      ],
                      AutoScalingGroupName=os.environ['autoscalingGroup']
                  )
                  print(response)

                  response = client.update_auto_scaling_group(
                      AutoScalingGroupName=os.environ['autoscalingGroup'],
                      MinSize=2
                  )
                  print(response)

                  response = client.put_warm_pool(
                      AutoScalingGroupName=os.environ['autoscalingGroup'],
                      PoolState="Stopped"
                  )
                  print(response)
              elif event['RequestType'] == 'Delete':
                  string = """curl -H 'Content-Type: ''' -X PUT -d '{{
                      "Status": "SUCCESS", "PhysicalResourceId": "{}", "StackId": "{}",
                      "RequestId": "{}", "LogicalResourceId": "{}"
                  }}' '{}'"""
                  print(string.format(
                      event['PhysicalResourceId'], event['StackId'], event['RequestId'],
                      event['LogicalResourceId'], event['ResponseURL'])
                  )
              responseData = {}
              responseData['Data'] = response
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Handler: index.handler
      Role: !GetAtt LambdaExecutionAutoScalingRole.Arn
      Runtime: python3.7
      Timeout: 60
  InvokeLambdaResource:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt AddColdInstanceToASGAndCreateWarmPoolLambdaFunction.Arn
  LambdaExecutionAutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: 'autoscaling'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'autoscaling:*'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ESInstanceASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: es_asg
      AvailabilityZones: !Ref AvailabilityZones
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1AID
        - !Ref PrivateSubnet2AID
      LaunchTemplate:
        LaunchTemplateId: !Ref ESInstanceLaunchTemplate
        Version: !GetAtt ESInstanceLaunchTemplate.LatestVersionNumber
      MetricsCollection:
        - Granularity: '1Minute'
      MinSize: '0'
      DesiredCapacity: '0'
      MaxSize: !Sub ${MaxNumberOfESInstances}
      TargetGroupARNs:
        - !Ref TargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT25M
        WaitOnResourceSignals: true
  TransactionsPerHourScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ESInstanceASG
      EstimatedInstanceWarmup: 1800  # 30 minutes
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        CustomizedMetricSpecification:
          MetricName: avg-tasks-per-second
          Namespace: !Ref MetricsNamespace
          Statistic: Average
        TargetValue: 1
  # Lifecycle Stuff ###################################################
  LaunchHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      LifecycleHookName: launch_hook
      AutoScalingGroupName: !Ref ESInstanceASG
      DefaultResult: ABANDON
      HeartbeatTimeout: 1800
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
  TerminationHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ESInstanceASG
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
  TerminationDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: 'Run command before terminating instance'
        schemaVersion: '0.3'
        assumeRole: !GetAtt SSMDocumentRole.Arn
        parameters:
          instanceId:
            type: String
        mainSteps:
          - name: RunCommand
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunShellScript
              InstanceIds:
                - '{{ instanceId }}'
              Parameters:
                commands: |
                  source /opt/microfocus/EnterpriseDeveloper/bin/cobsetenv
                  casstop -lBNKDM -w60
          - name: TerminateInstance
            action: aws:executeAwsApi
            inputs:
              Api: CompleteLifecycleAction
              AutoScalingGroupName: !Ref ESInstanceASG
              InstanceId: '{{ instanceId }}'
              LifecycleActionResult: CONTINUE
              LifecycleHookName: !Ref TerminationHook
              Service: autoscaling
  TerminationRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance-terminate Lifecycle Action
        detail:
          AutoScalingGroupName:
            - !Ref ESInstanceASG
      Targets:
        - Id: my-termination-document
          Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${TerminationDocument}:$DEFAULT'
          RoleArn: !GetAtt AutomationRuleRole.Arn
          InputTransformer:
            InputPathsMap:
              instanceId: '$.detail.EC2InstanceId'
            InputTemplate: '{"instanceId":[<instanceId>]}'
  AutomationRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: start-automation-for-terminate
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${TerminationDocument}:$DEFAULT'
  SSMDocumentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: run-command-and-complete-lifecycle
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                Resource: !Sub 'arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ESInstanceASG}'
              - Effect: Allow
                Action:
                  - ssm:DescribeInstanceInformation
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource: 'arn:aws:ssm:*::document/AWS-RunShellScript'
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
Outputs:
  ESInstanceLaunchTemplateID:
    Description: >-
      The launch template ID which deploys an Enterprise Server instance.
    Value: !Ref ESInstanceLaunchTemplate
  ESInstanceLaunchTemplateVersion:
    Description: >-
      The latest version of the launch template which deploys an Enterprise Server instance.
    Value: !GetAtt ESInstanceLaunchTemplate.LatestVersionNumber
  AutoScalingGroup:
    Description: >-
      The auto scaling group which uses the ESInstanceLaunchTemplate.
    Value: !Ref ESInstanceASG